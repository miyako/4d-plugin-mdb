/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-mdb.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : mdb
 #	author : miyako
 #	2024/05/14
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-mdb.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- mdb
            
			case 1 :
				mdb_test(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

#include <stdlib.h>
#import <Foundation/Foundation.h>

void mdb_test(PA_PluginParameters params) {
    
    C_TEXT Param1;
    C_TEXT returnValue;
    
    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    Param1.fromParamAtIndex(pParams, 1);
    CUTF8String path;
    Param1.copyPath(&path);
    
    MdbHandle *mdb = mdb_open ((const char *)path.c_str(), MDB_NOFLAGS);

    if(mdb) {
        if (mdb_read_catalog (mdb, MDB_TABLE)) {
            
            guint32 export_options = 0;
            
            char tempFilePathCString[PATH_MAX];
            @autoreleasepool {
                NSString *tempDir = NSTemporaryDirectory();
                if(tempDir) {
                    NSString *tempFileTemplate = [tempDir stringByAppendingPathComponent:@"mdb-tool.XXXXXX"];
                    const char *tempFileTemplateCString = [tempFileTemplate fileSystemRepresentation];
                    strcpy(tempFilePathCString, tempFileTemplateCString);
                    int fd = mkstemp(tempFilePathCString);
                    if (fd != -1) {
                        FILE *fp = fdopen(fd, "wb");
                        if(fp) {
                            int success = mdb_print_schema(mdb, fp, NULL, NULL, export_options);
                            fclose(fp);
                            
                            NSString *tempFilePath = [NSString stringWithUTF8String:tempFilePathCString];
                            NSError *error = nil;
                            NSString *fileContent = [NSString stringWithContentsOfFile:tempFilePath encoding:NSUTF8StringEncoding error:&error];

                            returnValue.setUTF16String(fileContent);
                            
                            [[NSFileManager defaultManager] removeItemAtPath:tempFilePath error:nil];
                        }
                    }
                }
            }
        }
        mdb_close (mdb);
    }

    returnValue.setReturn(pResult);
}

