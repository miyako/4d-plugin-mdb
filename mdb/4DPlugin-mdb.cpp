/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-mdb.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : mdb
 #	author : miyako
 #	2024/05/14
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-mdb.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- mdb
            
			case 1 :
                mdb_sql(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

static void mdb_sql(PA_PluginParameters params) {
        
    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    PA_ObjectRef returnValue;
    returnValue = PA_CreateObject();
    ob_set_b(returnValue, L"success", false);
    
    C_TEXT Param1;
    Param1.fromParamAtIndex(pParams, 1);
    CUTF8String sql, path, delimiter = (const uint8_t *)"\t";
    Param1.copyUTF8String(&sql);
    
    PA_ObjectRef options = PA_GetObjectParameter(params, 2);
        
    if(options) {
        if(ob_is_defined(options, L"path")) {
            if((ob_get_s(options, L"path", &path)) && path.length()) {
                
                MdbSQL *mdbsql = mdb_sql_init();
                MdbHandle *mdb = mdb_sql_open(mdbsql, (char *)path.c_str());
                if(mdb) {
                    
                    mdb_read_catalog (mdb, MDB_TABLE);
                    mdb_print_schema(mdb, stdout, NULL, NULL, NULL);
                    
                    mdb_sql_run_query(mdbsql, (const gchar *)sql.c_str());
                    
                    if (!mdb_sql_has_error(mdbsql)) {
                        PA_CollectionRef rows = PA_CreateCollection();
                        while(mdb_sql_fetch_row(mdbsql, mdbsql->cur_table)) {
                            PA_ObjectRef row = PA_CreateObject();
                            for (unsigned int j = 0; j < mdbsql->num_columns; ++j) {
                                MdbSQLColumn *sqlcol = (MdbSQLColumn *)g_ptr_array_index(mdbsql->columns, j);
                                ob_set_s(row,
                                         (const char *)sqlcol->name,
                                         (const char *)(g_ptr_array_index(mdbsql->bound_values, j)));
                            }
                            PA_Variable v = PA_CreateVariable(eVK_Object);
                            PA_SetObjectVariable(&v, row);
                            PA_SetCollectionElement(rows, PA_GetCollectionLength(rows), v);
                            PA_ClearVariable(&v);
                        }
                        ob_set_n(returnValue, L"length", mdbsql->row_count);
                        ob_set_c(returnValue, L"values", rows);
                        ob_set_b(returnValue, L"success", true);
                    }else{
                        ob_set_s(returnValue, "errorMessage", mdb_sql_last_error(mdbsql));
                        
                    }
                }
                mdb_sql_exit(mdbsql);
            }
        }
    }
/*
    MdbHandle *mdb = mdb_open ((const char *)path.c_str(), MDB_NOFLAGS);

    if(mdb) {
        if (mdb_read_catalog (mdb, MDB_TABLE)) {
            
            guint32 export_options = 0;
            
            char tempFilePathCString[PATH_MAX];
            @autoreleasepool {
                NSString *tempDir = NSTemporaryDirectory();
                if(tempDir) {
                    NSString *tempFileTemplate = [tempDir stringByAppendingPathComponent:@"mdb-tool.XXXXXX"];
                    const char *tempFileTemplateCString = [tempFileTemplate fileSystemRepresentation];
                    strcpy(tempFilePathCString, tempFileTemplateCString);
                    int fd = mkstemp(tempFilePathCString);
                    if (fd != -1) {
                        FILE *fp = fdopen(fd, "wb");
                        if(fp) {
                            int success = mdb_print_schema(mdb, fp, NULL, NULL, export_options);
                            fclose(fp);
                            
                            NSString *tempFilePath = [NSString stringWithUTF8String:tempFilePathCString];
                            NSError *error = nil;
                            NSString *fileContent = [NSString stringWithContentsOfFile:tempFilePath encoding:NSUTF8StringEncoding error:&error];

                            returnValue.setUTF16String(fileContent);
                            
                            [[NSFileManager defaultManager] removeItemAtPath:tempFilePath error:nil];
                        }
                    }
                }
            }
        }
        mdb_close (mdb);
    }
*/
    PA_ReturnObject(params, returnValue);
}

